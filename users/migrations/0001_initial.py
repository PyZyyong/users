# Generated by Django 2.0.6 on 2018-07-20 16:51

import b2c.general.interfaces
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_fsm


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wxapp', '0001_initial'),
        ('auth', '0009_alter_user_last_name_max_length'),
        ('misc', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='最后更新时间')),
                ('last_logged_in_ip', models.CharField(blank=True, max_length=20, null=True, verbose_name='最后登录IP')),
                ('mobile_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='手机号')),
                ('display_name', models.CharField(blank=True, max_length=20, null=True, verbose_name='昵称 or 姓名')),
                ('is_admin_user', models.BooleanField(default=False, verbose_name='是否是管理员用户')),
                ('is_merchant_user', models.BooleanField(default=False, verbose_name='是否是医院用户')),
                ('is_frontend_user', models.BooleanField(default=False, verbose_name='是否是微信用户')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
            },
            bases=(models.Model, b2c.general.interfaces.ReminderSubscriber),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Merchant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='医院名称')),
                ('name_key', models.CharField(blank=True, max_length=100, null=True, verbose_name='英文名称')),
                ('address', models.CharField(blank=True, max_length=200, null=True, verbose_name='详细地址')),
                ('owner', models.CharField(blank=True, max_length=20, null=True, verbose_name='地推负责人')),
                ('contact', models.CharField(max_length=20, verbose_name='联系人')),
                ('tel_phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='固定电话')),
                ('contact_mobile_number', models.CharField(max_length=20, verbose_name='联系人电话')),
                ('contact_email', models.EmailField(max_length=50, verbose_name='联系人邮箱')),
                ('contact_position', models.CharField(blank=True, max_length=10, null=True, verbose_name='联系人职位')),
                ('authenticated_state', django_fsm.FSMIntegerField(choices=[(1, '已认证'), (2, '未认证'), (3, '无法认证')], default=2)),
                ('district_area', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='district_as_merchant_areas', to='misc.District', verbose_name='所在地(区)')),
                ('district_city', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='district_as_merchant_cities', to='misc.District', verbose_name='所在地(市)')),
                ('district_province', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='district_as_merchant_provinces', to='misc.District', verbose_name='所在地(省)')),
            ],
            options={
                'verbose_name': '商户',
                'verbose_name_plural': '商户',
            },
        ),
        migrations.CreateModel(
            name='MerchantCard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, max_length=2048, null=True, verbose_name='介绍')),
                ('location_lat', models.FloatField(verbose_name='地址纬度')),
                ('location_lng', models.FloatField(verbose_name='地址经度')),
                ('merchant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='users.Merchant', verbose_name='商户')),
            ],
            options={
                'verbose_name': '商户卡',
                'verbose_name_plural': '商户卡',
                'permissions': (('merchant_card_update', '编辑商户卡'),),
            },
        ),
        migrations.CreateModel(
            name='MerchantCertificate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, verbose_name='名称')),
                ('codename', models.CharField(max_length=50, verbose_name='编码')),
                ('no', models.CharField(max_length=50, verbose_name='证书编号')),
                ('extra_data1', models.CharField(max_length=100, verbose_name='额外信息')),
                ('valid_from', models.DateField(blank=True, default='', null=True, verbose_name='许可证有效期起始')),
                ('valid_to', models.DateField(blank=True, default='', null=True, verbose_name='许可证有效期结束')),
                ('merchant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='certificates', to='users.Merchant', verbose_name='资质证书')),
            ],
            options={
                'verbose_name': '资质证书',
                'verbose_name_plural': '资质证书',
            },
        ),
        migrations.CreateModel(
            name='MerchantConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shop_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='商铺名称')),
                ('sms_sign', models.CharField(blank=True, max_length=20, null=True, verbose_name='短信签名')),
                ('merchant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='config', to='users.Merchant', verbose_name='所属商家')),
                ('wx_mch_user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='wxapp.WXMchUser', verbose_name='所属微信小程序商户')),
            ],
        ),
        migrations.CreateModel(
            name='MerchantGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='创建时间', verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='修改时间', verbose_name='修改时间')),
                ('notes', models.CharField(blank=True, max_length=50, null=True, verbose_name='备注')),
            ],
            options={
                'verbose_name': '商户组',
                'verbose_name_plural': '商户组',
                'permissions': (('merchant_group_list', '商户用户组列表'), ('merchant_group_create', '商户用户组创建'), ('merchant_group_update', '商户用户组编辑'), ('merchant_group_delete', '商户用户组删除')),
            },
        ),
        migrations.CreateModel(
            name='MerchantLegalPerson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('realname', models.CharField(max_length=10, verbose_name='法人姓名')),
                ('idcard_number', models.CharField(max_length=20, verbose_name='身份证号')),
                ('idcard_valid_from', models.DateField(blank=True, null=True, verbose_name='身份证有效期起始')),
                ('idcard_valid_to', models.DateField(blank=True, null=True, verbose_name='身份证有效期结束')),
                ('merchant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='legal_person', to='users.Merchant', verbose_name='法人信息')),
            ],
            options={
                'verbose_name': '法人信息',
                'verbose_name_plural': '法人信息',
            },
        ),
        migrations.CreateModel(
            name='AdminUser',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('source', models.CharField(choices=[(1, 'YMJ'), (2, 'LDAP'), (3, '内部创建')], default=3, max_length=50, verbose_name='用户来源')),
                ('department_description', models.CharField(blank=True, max_length=20, null=True, verbose_name='所属部门')),
                ('notes', models.CharField(blank=True, max_length=50, null=True, verbose_name='备注')),
            ],
            options={
                'verbose_name': 'Admin用户',
                'verbose_name_plural': 'Admin用户',
            },
            bases=('users.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='FrontendUser',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='生日')),
                ('gender', django_fsm.FSMIntegerField(choices=[(0, '女'), (1, '男'), (2, '未知')], default=1)),
                ('is_synced_from_wx', models.BooleanField(default=False, verbose_name='是否从微信同步信息')),
                ('synced_from_wx_at', models.DateTimeField(blank=True, null=True, verbose_name='同步时间')),
                ('district', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='misc.District', verbose_name='常出没')),
                ('merchant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.Merchant', verbose_name='所属商户')),
                ('wx_user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.PROTECT, to='wxapp.WXAppUser', verbose_name='小程序用户')),
            ],
            options={
                'verbose_name': '微信用户',
                'verbose_name_plural': '微信用户',
            },
            bases=('users.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='MerchantUser',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('is_merchant_admin', models.BooleanField(default=False, verbose_name='是否是商户管理员')),
                ('notes', models.CharField(blank=True, max_length=50, null=True, verbose_name='备注')),
                ('merchant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='merchant', to='users.Merchant', verbose_name='所属医院')),
            ],
            options={
                'verbose_name': '医院用户',
                'verbose_name_plural': '医院用户',
                'permissions': (('merchant_user_list', '商户用户列表'), ('merchant_user_create', '商户用户创建'), ('merchant_user_update', '商户用户编辑'), ('merchant_user_disable', '商户用户禁用'), ('merchant_user_enable', '商户用户启用'), ('merchant_user_set_group', '商户用户设置组')),
            },
            bases=('users.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='merchantgroup',
            name='create_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='create_user', to=settings.AUTH_USER_MODEL, verbose_name='创建者'),
        ),
        migrations.AddField(
            model_name='merchantgroup',
            name='group',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='auth.Group', verbose_name='商户组'),
        ),
        migrations.AddField(
            model_name='merchantgroup',
            name='merchant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='merchant_group', to='users.Merchant', verbose_name='所属商户'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
